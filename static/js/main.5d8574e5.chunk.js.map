{"version":3,"sources":["App.js","index.js","../../dist-modules/index.js","../../dist-modules/Profile.js","../../../../near-openweb-js/src/openweb.js"],"names":["App","accountId","Component","ReactDOM","render","document","getElementById","Object","defineProperty","exports","value","Profile","undefined","obj","_Profile","require","_Profile2","__esModule","default","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_react2","_interopRequireDefault","_nearOpenwebJs","_propTypes2","propTypes","string","isRequired","defaultProfileUrl","displayName","profileUrl","bio","onFetch","func","forceShow","bool","_React$Component","instance","TypeError","_classCallCheck","this","_this","self","call","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","state","loading","found","nearConfig","window","networkId","nodeUrl","walletUrl","profileComponentCache","profileCache","app","OpenWebApp","init","subClass","superClass","create","constructor","setPrototypeOf","_inherits","_this2","ready","then","updateProfile","fn","_ref","mark","_callee","wrap","_context","prev","next","abrupt","sent","console","log","Promise","all","getFrom","values","catch","e","stop","gen","apply","arguments","resolve","reject","step","arg","info","error","done","err","_x","_this3","setState","fetchProfile","profile","prevProps","styles","createElement","style","className","role","title","profileImage","src","alt","profileName","profileDisplayName","profileAccountId","defaultProps","whiteSpace","display","height","width","borderRadius","verticalAlign","overflowY","marginLeft","color","encryptionKey","appId","_nearConfig","blocking","parseEncryptionKey","nacl","Buffer","keyKey","localStorage","getItem","keyPair","fromSecretKey","from","setItem","secretKey","toString","_key","_keyStore","nearlib","BrowserLocalStorageKeyStore","assign","deps","keyStore","_near","_account","connection","_contract","viewMethods","changeMethods","sender","_networkId","_ready","_innerInit","getKey","getPublicKey","_tmpKey","accessKey","fromRandom","publicKey","set","getEncryptionPublicKey","Error","setKey","msg64","buf","nonce","Uint8Array","nonceLength","copy","box","decodedBuf","open","str","fullBuf","theirPublicKey","publicKeyLength","options","encrypted","get","app_id","JSON","parse","decryptSecretBox","account","contract","apps","forceReady","wrappedCall","encryptSecretBox","stringify","remove","num_messages","pull_message","theirPublicKey64","content","getTheirPublicKey","encryptBox","decryptBox","receiverId","message","send_message","receiver_id"],"mappings":"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","file":"static/js/main.5d8574e5.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { Profile } from 'react-near-openweb'\n\nexport default class App extends Component {\n  render () {\n    return (\n      <div>\n        <Profile accountId='eugenethedream' />\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Profile = undefined;\n\nvar _Profile = require('./Profile.js');\n\nvar _Profile2 = _interopRequireDefault(_Profile);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.Profile = _Profile2.default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _nearOpenwebJs = require('near-openweb-js');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar propTypes = {\n  accountId: _propTypes2.default.string.isRequired,\n  defaultProfileUrl: _propTypes2.default.string,\n  displayName: _propTypes2.default.string,\n  profileUrl: _propTypes2.default.string,\n  bio: _propTypes2.default.string,\n  onFetch: _propTypes2.default.func,\n  forceShow: _propTypes2.default.bool\n};\n\nvar defaultProps = {\n  defaultProfileUrl: null,\n  styles: {\n    profile: {\n      whiteSpace: 'nowrap',\n      display: 'inline-block'\n    },\n    profileImage: {\n      height: '3em',\n      width: '3em',\n      borderRadius: '50%',\n      verticalAlign: 'middle'\n    },\n    profileName: {\n      overflowY: 'hidden',\n      marginLeft: '0.5em',\n      verticalAlign: 'middle'\n    },\n    profileDisplayName: {},\n    profileAccountId: {\n      color: '#999'\n    }\n  }\n};\n\nvar profileAppId = 'profile';\n\nvar Profile = function (_React$Component) {\n  _inherits(Profile, _React$Component);\n\n  function Profile(props) {\n    _classCallCheck(this, Profile);\n\n    var _this = _possibleConstructorReturn(this, (Profile.__proto__ || Object.getPrototypeOf(Profile)).call(this, props));\n\n    _this.state = {\n      displayName: '',\n      profileUrl: null,\n      bio: '',\n      loading: false,\n      found: false\n    };\n    var nearConfig = _this.props.nearConfig || window.nearConfig || {\n      networkId: 'default',\n      nodeUrl: 'https://rpc.nearprotocol.com',\n      walletUrl: 'https://wallet.nearprotocol.com'\n    };\n\n    if (!window.profileComponentCache) {\n      window.profileComponentCache = {\n        profileCache: {},\n        app: new _nearOpenwebJs.OpenWebApp(profileAppId, null, nearConfig)\n      };\n      window.profileComponentCache.app.init();\n    }\n\n    _this.profileCache = window.profileComponentCache.profileCache;\n    _this.app = window.profileComponentCache.app;\n    return _this;\n  }\n\n  _createClass(Profile, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.props.accountId && this.app.ready().then(function () {\n        return _this2.updateProfile(_this2.props.accountId);\n      });\n    }\n  }, {\n    key: 'fetchProfile',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(accountId) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(accountId in this.profileCache)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.profileCache[accountId];\n\n              case 3:\n                return _context.abrupt('return', _context.sent);\n\n              case 6:\n                console.log(\"Fetching profile for \" + accountId);\n                this.profileCache[accountId] = Promise.all([this.app.getFrom(accountId, 'displayName'), this.app.getFrom(accountId, 'profileUrl'), this.app.getFrom(accountId, 'bio')]).then(function (values) {\n                  return {\n                    accountId: accountId,\n                    displayName: values[0] || \"\",\n                    profileUrl: values[1],\n                    bio: values[2] || \"\"\n                  };\n                }).catch(function (e) {\n                  return false;\n                });\n                _context.next = 10;\n                return this.profileCache[accountId];\n\n              case 10:\n                return _context.abrupt('return', _context.sent);\n\n              case 11:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchProfile(_x) {\n        return _ref.apply(this, arguments);\n      }\n\n      return fetchProfile;\n    }()\n  }, {\n    key: 'updateProfile',\n    value: function updateProfile(accountId) {\n      var _this3 = this;\n\n      this.setState({\n        displayName: \"\",\n        profileUrl: null,\n        bio: \"\",\n        loading: true,\n        found: false\n      });\n      this.fetchProfile(this.props.accountId).then(function (profile) {\n        if (profile) {\n          _this3.setState({\n            displayName: profile.displayName,\n            profileUrl: profile.profileUrl,\n            bio: profile.bio,\n            loading: false,\n            found: true\n          });\n        } else {\n          _this3.setState({\n            loading: false,\n            found: false\n          });\n        }\n        _this3.props.onFetch && _this3.props.onFetch(profile);\n      });\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.accountId !== prevProps.accountId) {\n        this.updateProfile(this.props.accountId);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var displayName = this.props.displayName || this.state.displayName;\n      var profileUrl = this.props.profileUrl || this.state.profileUrl || this.props.defaultProfileUrl;\n      var bio = this.props.bio || this.state.bio;\n      var accountId = this.props.accountId;\n      var styles = this.props.styles;\n\n      return this.state.loading ? _react2.default.createElement(\n        'div',\n        { style: styles.profile },\n        _react2.default.createElement(\n          'div',\n          { className: 'spinner-grow', role: 'status' },\n          _react2.default.createElement(\n            'span',\n            { className: 'sr-only' },\n            'Loading...'\n          )\n        )\n      ) : this.state.found || this.props.forceShow ? _react2.default.createElement(\n        'div',\n        { style: styles.profile, title: bio },\n        _react2.default.createElement('img', { style: styles.profileImage, src: profileUrl, alt: 'Profile @' + accountId }),\n        _react2.default.createElement(\n          'span',\n          { style: styles.profileName },\n          _react2.default.createElement(\n            'span',\n            { style: styles.profileDisplayName },\n            displayName\n          ),\n          _react2.default.createElement(\n            'span',\n            { style: styles.profileAccountId },\n            \"(@\" + accountId + \")\"\n          )\n        )\n      ) : null;\n    }\n  }]);\n\n  return Profile;\n}(_react2.default.Component);\n\nProfile.propTypes = propTypes;\nProfile.defaultProps = defaultProps;\n\nexports.default = Profile;","import * as nearlib from \"nearlib\";\nimport * as nacl from \"tweetnacl\";\n\nconst GAS = 2000000000000000;\n\nconst encryptionKey = \"encryptionKey\";\n\n/**\n  a class representing the OpenWebApp API\n\n  this API supports local contract methods\n  - get: gets a value from local storage\n  - set: sets a value on local storage\n  - remove: deletes a value from local storage\n\n  and remote contract methods\n  - pull: reads a message from a remote contract\n  - post / send: sends a message to a remote contract\n */\nclass OpenWebApp {\n  constructor(appId, accountId, nearConfig) {\n    this.appId = appId;\n    this.accountId = accountId;\n    this._nearConfig = nearConfig;\n    this.blocking = Promise.resolve();\n    this.parseEncryptionKey();\n    window.nacl = nacl;\n    window.Buffer = Buffer;\n  }\n\n  /**\n    read private key from local storage\n    - if found, recreate the related key pair\n    - if not found, create a new key pair and save it to local storage\n   */\n  parseEncryptionKey() {\n    const keyKey = \"enc_key:\" + this.accountId + \":\" + this.appId + \":\";\n    let key = localStorage.getItem(keyKey);\n    if (key) {\n      key = nacl.box.keyPair.fromSecretKey(Buffer.from(key, 'base64'));\n    } else {\n      key = new nacl.box.keyPair();\n      localStorage.setItem(keyKey, Buffer.from(key.secretKey).toString('base64'));\n    }\n    this._key = key;\n  }\n\n  async _innerInit() {\n    this._keyStore = new nearlib.keyStores.BrowserLocalStorageKeyStore(\n      localStorage, \"app:\" + this.appId,\n    );\n    this._near = await nearlib.connect(Object.assign({ deps: { keyStore:  this._keyStore } }, this._nearConfig));\n    this._account = new nearlib.Account(this._near.connection, this.accountId);\n    this._contract = new nearlib.Contract(this._account, this.accountId, {\n      viewMethods: ['get', 'apps', 'num_messages'],\n      changeMethods: ['set', 'remove', 'pull_message', 'send_message'],\n      sender: this.accountId\n    });\n    this._networkId = this._nearConfig.networkId;\n    return true;\n  }\n\n  /**\n    initialize the client-side application with a BrowserLocalStorageKeyStore\n    and a connection to the NEAR platform, binding OpenWebContract methods:\n\n    - get, set, remove: local invocation methods for controlling the state of local applications\n    - pull_message, send_message: remote invocation methods for communicating with contracts of other users\n    - apps, num_messages: convenience methods for listing all apps on the OpenWeb and messages for a specific app\n   */\n  async init() {\n    return this._ready || (this._ready = this._innerInit());\n  }\n\n  /**\n    helper method to check if the user is logged in with the app\n   */\n  async ready() {\n    return this.init();\n  }\n\n  /**\n    produce a public key on the user account\n    @return {string} existing (or create new) public key for the current account\n   */\n  async getAccessPublicKey() {\n    const key = await this._keyStore.getKey(this._networkId, this.accountId);\n    if (key) {\n      return key.getPublicKey();\n    }\n    if (this._tmpKey) {\n      return this._tmpKey.getPublicKey();\n    }\n    const accessKey = nearlib.KeyPair.fromRandom('ed25519');\n    this._tmpKey = accessKey;\n    return accessKey.getPublicKey();\n  }\n\n  getEncryptionPublicKey() {\n    return Buffer.from(this._key.publicKey).toString('base64')\n  }\n\n  async storeEncryptionPublicKey() {\n    return this.set(encryptionKey, this.getEncryptionPublicKey());\n  }\n\n  /**\n    capture new keys in the keystore\n   */\n  async onKeyAdded() {\n    if (!this._tmpKey) {\n      throw new Error('The key is not initialized yet');\n    }\n    await this._keyStore.setKey(this._networkId, this.accountId, this._tmpKey);\n    this._tmpKey = null;\n  }\n\n  /**\n   * enforces that the app is ready\n   * @returns {Promise<void>}\n   */\n  async forceReady() {\n    if (!await this.ready()) {\n      throw new Error('Not ready yet');\n    }\n  }\n\n  /**\n    wrap a call in a Promise for async handling?\n\n    @param {Function} call the function to be wrapped in a Promise\n    @return {Promise} the Promise to return\n   */\n  wrappedCall(call) {\n    this.blocking = this.blocking.then(() => call()).catch(() => call());\n    return this.blocking;\n  }\n\n  /**\n    unbox encrypted messages with our secret key\n    @param {string} msg64 encrypted message encoded as Base64\n    @return {string} decoded contents of the box\n   */\n  decryptSecretBox(msg64) {\n    const buf = Buffer.from(msg64, 'base64');\n    const nonce = new Uint8Array(nacl.secretbox.nonceLength);\n    buf.copy(nonce, 0, 0, nonce.length);\n    const box = new Uint8Array(buf.length - nacl.secretbox.nonceLength);\n    buf.copy(box, 0, nonce.length);\n    const decodedBuf = nacl.secretbox.open(box, nonce, this._key.secretKey);\n    return Buffer.from(decodedBuf).toString()\n  }\n\n  /**\n    box an unencrypted message with our secret key\n    @param {string} str the message to wrap in a box\n    @return {string} base64 encoded box of incoming message\n   */\n  encryptSecretBox(str) {\n    const buf = Buffer.from(str);\n    const nonce = nacl.randomBytes(nacl.secretbox.nonceLength);\n    const box = nacl.secretbox(buf, nonce, this._key.secretKey);\n\n    const fullBuf = new Uint8Array(box.length + nacl.secretbox.nonceLength);\n    fullBuf.set(nonce);\n    fullBuf.set(box, nacl.secretbox.nonceLength);\n    return Buffer.from(fullBuf).toString('base64')\n  }\n\n  /**\n   unbox encrypted messages with our secret key\n   @param {string} msg64 encrypted message encoded as Base64\n   @param {Uint8Array} theirPublicKey the public key to use to verify the message\n   @return {string} decoded contents of the box\n   */\n  decryptBox(msg64, theirPublicKey) {\n    if (theirPublicKey.length !== nacl.box.publicKeyLength) {\n      throw new Error(\"Given encryption public key is invalid.\");\n    }\n    const buf = Buffer.from(msg64, 'base64');\n    const nonce = new Uint8Array(nacl.box.nonceLength);\n    buf.copy(nonce, 0, 0, nonce.length);\n    const box = new Uint8Array(buf.length - nacl.box.nonceLength);\n    buf.copy(box, 0, nonce.length);\n    const decodedBuf = nacl.box.open(box, nonce, theirPublicKey, this._key.secretKey);\n    return Buffer.from(decodedBuf).toString()\n  }\n\n  /**\n   box an unencrypted message with their public key and sign it with our secret key\n   @param {string} str the message to wrap in a box\n   @param {Uint8Array} theirPublicKey the public key to use to encrypt the message\n   @returns {string} base64 encoded box of incoming message\n   */\n  encryptBox(str, theirPublicKey) {\n    if (theirPublicKey.length !== nacl.box.publicKeyLength) {\n      throw new Error(\"Given encryption public key is invalid.\");\n    }\n    const buf = Buffer.from(str);\n    const nonce = nacl.randomBytes(nacl.box.nonceLength);\n    const box = nacl.box(buf, nonce, theirPublicKey, this._key.secretKey);\n\n    const fullBuf = new Uint8Array(box.length + nacl.box.nonceLength);\n    fullBuf.set(nonce);\n    fullBuf.set(box, nacl.box.nonceLength);\n    return Buffer.from(fullBuf).toString('base64')\n  }\n\n  /**\n    get data from a local app.  apps can decide whether or not to encrypt their contents\n\n    @param {string} key the key used to store a value in the app\n    @param {object} options to specify:\n    - {bool} `encrypted` flag indicating whether or not the value is box encrypted. Default false.\n    - {string} `appId` the name of the app. Same app by default.\n    @return {string} the value returned by the local app\n   */\n  async get(key, options) {\n    options = Object.assign({\n      encrypted: false,  // not supported yet\n      appId: this.appId,\n    }, options);\n    let str = await this._contract.get({\n      app_id: options.appId,\n      key,\n    });\n    if (str) {\n      str = JSON.parse(options.encrypted ? this.decryptSecretBox(str) : str);\n    }\n    return str;\n  }\n\n  /**\n    get a value from a remote app installed on another account\n\n    @param {string} accountId account from which to get a value\n    @param {string} key the key to use to identify the value\n    @param {object} options to specify:\n     - {bool} `encrypted` flag indicating whether or not the value is box encrypted. Default false.\n     - {string} `appId` the name of the app. Same app by default.\n    @return {string} the value returned from the remote app\n   */\n  async getFrom(accountId, key, options) {\n    options = Object.assign({\n      encrypted: false,  // not supported yet\n      appId: this.appId,\n    }, options);\n    const account = new nearlib.Account(this._near.connection, accountId);\n    const contract = new nearlib.Contract(account, accountId, {\n      viewMethods: ['get'],\n      changeMethods: [],\n      sender: this.accountId\n    });\n\n    let str = await contract.get({\n      app_id: options.appId,\n      key,\n    });\n    if (str) {\n      str = JSON.parse(options.encrypted ? this.decryptSecretBox(str) : str);\n    }\n    return str;\n  }\n\n  /**\n    return a list of installed apps\n    @return {object} collection of installed apps\n   */\n  async apps() {\n    return await this._contract.apps();\n  }\n\n  /**\n    set a value in local storage\n\n    @param {string} key identifier for the value to be set\n    @param {string} value the value to be set\n    @param {object} options to specify:\n      - {bool} `encrypted` flag indicating whether to encrypt (box) the value. Default false.\n   */\n  async set(key, value, options) {\n    await this.forceReady();\n    options = Object.assign({\n      encrypted: false,\n    }, options);\n    await this.wrappedCall(() => this._contract.set({\n      key,\n      value: options.encrypted ? this.encryptSecretBox(JSON.stringify(value)) : JSON.stringify(value),\n    }, GAS));\n  }\n\n  /**\n    remove a key-value pair from local storage\n\n    @param {string} key key to be removed\n   */\n  async remove(key) {\n    await this.forceReady();\n    await this.wrappedCall(() => this._contract.remove({\n      key,\n    }, GAS));\n  }\n\n  /**\n    retrieve a message\n\n    @return {any} return async? pull from local storage, null if not found\n   */\n  async pullMessage() {\n    await this.forceReady();\n    if (await this._contract.num_messages({app_id: this.appId}) > 0) {\n      return await this.wrappedCall(() => this._contract.pull_message({}, GAS));\n    } else {\n      return null;\n    }\n  }\n\n  async getTheirPublicKey(options) {\n    options = Object.assign({\n      accountId: null,\n      theirPublicKey: null,\n      theirPublicKey64: null,\n      encryptionKey,\n      appId: this.appId,\n    }, options);\n    if (options.theirPublicKey) {\n      return options.theirPublicKey;\n    }\n    if (!options.theirPublicKey64) {\n      if (!options.accountId) {\n        throw new Error(\"Either accountId or theirPublicKey64 has to be provided\");\n      }\n      options.theirPublicKey64 = await this.getFrom(options.accountId, options.encryptionKey, {\n        appId: options.appId,\n      });\n    }\n    if (!options.theirPublicKey64) {\n      throw new Error(\"Their app doesn't provide the encryption public key.\");\n    }\n    const buf = Buffer.from(options.theirPublicKey64, 'base64');\n    if (buf.length !== nacl.box.publicKeyLength) {\n      throw new Error(\"Their encryption public key is invalid.\");\n    }\n    const theirPublicKey = new Uint8Array(nacl.box.publicKeyLength);\n    theirPublicKey.set(buf);\n    return theirPublicKey;\n  }\n\n  /**\n   * Encrypts given content. Typical usage: encryptMessage(\"hello world\", {accountId: bla})\n   *\n   * @param {string} content The message to encrypt\n   * @param options\n   * @returns {Promise<string>}\n   */\n  async encryptMessage(content, options) {\n    const theirPublicKey = await this.getTheirPublicKey(options);\n    return this.encryptBox(content, theirPublicKey);\n  }\n\n  async decryptMessage(msg64, options) {\n    const theirPublicKey = await this.getTheirPublicKey(options);\n    return this.decryptBox(msg64, theirPublicKey);\n  }\n\n  /**\n    send a message to another account\n\n    @param {string} receiverId account id which will receive the message\n    @param {string} message the content of the message\n    @param {object} options to specify:\n      - {string} `appId` the app ID to receive the message. Same app by default.\n   */\n  async sendMessage(receiverId, message, options) {\n    this.forceReady();\n    options = Object.assign({\n      appId: this.appId,\n    }, options);\n    await this.wrappedCall(() => this._contract.send_message({\n      receiver_id: receiverId,\n      app_id: options.appId,\n      message,\n    }, GAS));\n  }\n}\n\nexport {encryptionKey, OpenWebApp}\n"],"sourceRoot":""}